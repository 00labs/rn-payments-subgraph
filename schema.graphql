type Payment @entity {
  id: ID!
  contractAddress: Bytes!
  tokenAddress: Bytes
  to: Bytes!
  from: Bytes!
  reference: Bytes!
  block: Int!
  timestamp: Int!
  txHash: Bytes!
  gasUsed: BigInt!
  gasPrice: BigInt!
  amount: BigDecimal!

  # fee values
  feeAmount: BigDecimal
  feeAddress: Bytes

  # conversion values
  currency: Bytes
  amountInCrypto: BigDecimal
  feeAmountInCrypto: BigDecimal
  maxRateTimespan: Int
}

# Payments made through a transferrable receivable, that are then routed
# through a normal proxy payment contract.
# Should match with a corresponding Payment event in the same amount.
type ReceivablePayment @entity {
  id: ID!
  contractAddress: Bytes!
  tokenAddress: Bytes
  paymentProxy: Bytes!
  from: Bytes!
  reference: Bytes!
  block: Int!
  timestamp: Int!
  txHash: Bytes!
  gasUsed: BigInt!
  gasPrice: BigInt!
  amount: BigDecimal!

  # fee values
  feeAmount: BigDecimal
  feeAddress: Bytes
}

enum EscrowState {
  paidEscrow
  paidIssuer
  emergency
  frozen
}

type Escrow @entity {
  id: ID!
  contractAddress: Bytes!
  paymentProxyAddress: Bytes!
  reference: Bytes!
  creationBlock: Int!
  creationTimestamp: Int!
  escrowState: EscrowState!
  tokenAddress: Bytes!
  amount: BigDecimal!
  feeAmount: BigDecimal!
  feeAddress: Bytes!
  from: Bytes!
  to: Bytes
  events: [EscrowEvent!] @derivedFrom(field: "escrow")
}

enum EventName {
  paidEscrow
  paidIssuer
  initiateEmergencyClaim
  revertEmergencyClaim
  freezeEscrow
}

type EscrowEvent @entity {
  id: ID!
  contractAddress: Bytes!
  reference: Bytes!
  escrow: Escrow!
  block: Int!
  timestamp: Int!
  txHash: Bytes!
  eventName: EventName!
  from: Bytes!
  gasUsed: BigInt!
  gasPrice: BigInt!
}
